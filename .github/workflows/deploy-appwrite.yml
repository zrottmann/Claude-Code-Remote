name: Deploy to Appwrite Sites

on:
  push:
    branches: [ master ]
    paths:
      - 'appwrite-deployment/**'
      - '.github/workflows/deploy-appwrite.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies and build
      run: |
        cd appwrite-deployment
        npm install --legacy-peer-deps
        npm run build
        
    - name: Deploy ClaudeCodeUI to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
        APPWRITE_PROJECT_ID: 68a4e3da0022f3e129d0
        APPWRITE_SITE_ID: remote
      run: |
        cd appwrite-deployment
        
        # Create ClaudeCodeUI deployment archive
        tar -czf claude-code-ui-final.tar.gz index.html package.json
        
        # Create deployment script for ClaudeCodeUI
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        console.log('üöÄ Deploying ClaudeCodeUI interface to remote.appwrite.network...');
        
        const fileData = fs.readFileSync('claude-code-ui-final.tar.gz');
        const boundary = '----WebKitFormBoundary' + Date.now();
        
        let body = '';
        body += '--' + boundary + '\r\n';
        body += 'Content-Disposition: form-data; name="entrypoint"\r\n\r\n';
        body += 'index.html\r\n';
        body += '--' + boundary + '\r\n';
        body += 'Content-Disposition: form-data; name="activate"\r\n\r\n';
        body += 'true\r\n';
        body += '--' + boundary + '\r\n';
        body += 'Content-Disposition: form-data; name="code"; filename="claude-code-ui-final.tar.gz"\r\n';
        body += 'Content-Type: application/gzip\r\n\r\n';
        
        const bodyBuffer = Buffer.concat([
          Buffer.from(body),
          fileData,
          Buffer.from('\r\n--' + boundary + '--\r\n')
        ]);
        
        const options = {
          hostname: 'nyc.cloud.appwrite.io',
          port: 443,
          path: '/v1/functions/' + process.env.APPWRITE_SITE_ID + '/deployments',
          method: 'POST',
          headers: {
            'Content-Type': 'multipart/form-data; boundary=' + boundary,
            'Content-Length': bodyBuffer.length,
            'X-Appwrite-Project': process.env.APPWRITE_PROJECT_ID,
            'X-Appwrite-Key': process.env.APPWRITE_API_KEY
          }
        };
        
        const req = https.request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            console.log('Deploy Status:', res.statusCode);
            console.log('Response:', data);
            
            if (res.statusCode >= 200 && res.statusCode < 300) {
              console.log('‚úÖ ClaudeCodeUI interface deployed successfully!');
              console.log('üåê Claude Code UI: https://remote.appwrite.network');
              console.log('');
              console.log('üéâ ClaudeCodeUI Features now live:');
              console.log('  ‚Ä¢ AI Chat Assistant with Claude integration');
              console.log('  ‚Ä¢ CodeMirror-based code editor with syntax highlighting');
              console.log('  ‚Ä¢ GitHub API integration for repository management');
              console.log('  ‚Ä¢ Appwrite cloud services integration');
              console.log('  ‚Ä¢ Mobile-responsive design with professional dark theme');
              console.log('  ‚Ä¢ Project and file explorer functionality');
              console.log('');
              console.log('üéØ Ready for remote Claude Code development!');
            } else {
              console.log('‚ùå Deployment failed');
              process.exit(1);
            }
          });
        });
        
        req.on('error', e => {
          console.log('‚ùå Deploy error:', e.message);
          process.exit(1);
        });
        
        req.write(bodyBuffer);
        req.end();
        EOF
        
        node deploy.cjs