name: Deploy to Appwrite Sites

on:
  push:
    branches: [ master ]
    paths:
      - 'index.html'
      - 'package.json'
      - '.github/workflows/deploy-appwrite.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Create deployment archive
      run: |
        mkdir -p dist
        cp index.html dist/
        tar -czf site.tar.gz -C dist .
        ls -la site.tar.gz
    
    - name: Deploy to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      run: |
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        const APPWRITE_API_KEY = process.env.APPWRITE_API_KEY;
        const APPWRITE_PROJECT_ID = '68a4e3da0022f3e129d0';
        
        if (!APPWRITE_API_KEY) {
          console.error('‚ùå APPWRITE_API_KEY not set');
          process.exit(1);
        }
        
        console.log('üì§ Deploying Claude Code Remote to Appwrite...');
        
        async function deployToSite() {
          // First try creating the remote function
          const functionData = JSON.stringify({
            functionId: 'remote',
            name: 'Claude Code Remote',
            runtime: 'node-18.0',
            execute: ['any'],
            events: [],
            schedule: '',
            timeout: 15,
            enabled: true
          });
          
          const createOptions = {
            hostname: 'nyc.cloud.appwrite.io',
            path: '/v1/functions',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Content-Length': functionData.length,
              'X-Appwrite-Project': APPWRITE_PROJECT_ID,
              'X-Appwrite-Key': APPWRITE_API_KEY
            }
          };
          
          return new Promise((resolve) => {
            const createReq = https.request(createOptions, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                console.log('Function create status:', res.statusCode);
                if (res.statusCode === 201) {
                  console.log('‚úÖ Function created successfully');
                } else if (res.statusCode === 409) {
                  console.log('‚ÑπÔ∏è Function already exists');
                } else {
                  console.log('Function create response:', data);
                }
                
                // Now deploy to the function
                deployToFunction();
              });
            });
            
            createReq.on('error', (e) => {
              console.log('Function create error:', e.message);
              deployToFunction();
            });
            
            createReq.write(functionData);
            createReq.end();
            
            function deployToFunction() {
              const fileData = fs.readFileSync('site.tar.gz');
              const boundary = '----WebKitFormBoundary' + Date.now();
              
              let body = '';
              body += '--' + boundary + '\\r\\n';
              body += 'Content-Disposition: form-data; name="entrypoint"\\r\\n\\r\\n';
              body += 'index.html\\r\\n';
              body += '--' + boundary + '\\r\\n';
              body += 'Content-Disposition: form-data; name="activate"\\r\\n\\r\\n';
              body += 'true\\r\\n';
              body += '--' + boundary + '\\r\\n';
              body += 'Content-Disposition: form-data; name="code"; filename="site.tar.gz"\\r\\n';
              body += 'Content-Type: application/gzip\\r\\n\\r\\n';
              
              const bodyBuffer = Buffer.concat([
                Buffer.from(body),
                fileData,
                Buffer.from('\\r\\n--' + boundary + '--\\r\\n')
              ]);
              
              const deployOptions = {
                hostname: 'nyc.cloud.appwrite.io',
                path: '/v1/functions/remote/deployments',
                method: 'POST',
                headers: {
                  'Content-Type': 'multipart/form-data; boundary=' + boundary,
                  'Content-Length': bodyBuffer.length,
                  'X-Appwrite-Project': APPWRITE_PROJECT_ID,
                  'X-Appwrite-Key': APPWRITE_API_KEY
                }
              };
              
              const deployReq = https.request(deployOptions, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  console.log('Deploy Status:', res.statusCode);
                  console.log('Deploy Response:', data);
                  
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    console.log('‚úÖ Deployment successful!');
                    console.log('üåê Site: https://remote.appwrite.network');
                    console.log('üéâ Claude Code Remote is now live!');
                  } else {
                    console.log('‚ùå Deployment failed');
                    process.exit(1);
                  }
                  resolve();
                });
              });
              
              deployReq.on('error', (e) => {
                console.log('‚ùå Deploy error:', e.message);
                process.exit(1);
              });
              
              deployReq.write(bodyBuffer);
              deployReq.end();
            }
          });
        }
        
        deployToSite();
        EOF
        
        node deploy.cjs