name: Deploy to Appwrite Sites

on:
  push:
    branches: [ master ]
    paths:
      - 'appwrite-deployment/**'
      - '.github/workflows/deploy-appwrite.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies and build
      run: |
        mkdir -p appwrite-deployment
        cp index.html appwrite-deployment/
        cp package.json appwrite-deployment/
        cd appwrite-deployment
        npm install --legacy-peer-deps || echo "No dependencies to install"
        
    - name: Deploy to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
        APPWRITE_PROJECT_ID: 68a9a5e4003518a2495b
        APPWRITE_SITE_ID: remote
      run: |
        cd appwrite-deployment
        
        # Create deployment script using Sites API
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const FormData = require('form-data');
        
        async function deploy() {
          console.log('📤 Deploying to Appwrite Sites...');
          console.log('Site ID:', process.env.APPWRITE_SITE_ID);
          console.log('Project:', process.env.APPWRITE_PROJECT_ID);
          
          // Create tar.gz for deployment
          const { execSync } = require('child_process');
          execSync('tar -czf deployment.tar.gz *');
          
          const form = new FormData();
          form.append('activate', 'true');
          form.append('code', fs.createReadStream('deployment.tar.gz'));
          
          const options = {
            hostname: 'nyc.cloud.appwrite.io',
            path: '/v1/sites/' + process.env.APPWRITE_SITE_ID + '/deployments',
            method: 'POST',
            headers: {
              'X-Appwrite-Project': process.env.APPWRITE_PROJECT_ID,
              'X-Appwrite-Key': process.env.APPWRITE_API_KEY,
              ...form.getHeaders()
            }
          };
          
          return new Promise((resolve, reject) => {
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                console.log('Status:', res.statusCode);
                console.log('Response:', data);
                
                if (res.statusCode >= 200 && res.statusCode < 300) {
                  console.log('✅ Deployment successful!');
                  console.log('🌐 Site: https://remote.appwrite.network');
                  resolve();
                } else {
                  console.log('❌ Deployment failed');
                  reject(new Error('Deployment failed'));
                }
              });
            });
            
            req.on('error', reject);
            form.pipe(req);
          });
        }
        
        deploy().catch(console.error);
        EOF
        
        node deploy.cjs